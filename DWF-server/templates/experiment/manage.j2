{% extends "base.j2" %}
{% from 'experiment/experiment_macros.j2' import experiment_config_row, experiment_task_row, initAjax %}
{% from 'animation_macros.j2' import done %}
{% from 'table_macros.j2' import search_table %}

{% block styles %}
    {{ super() }}
    <script src="//cdnjs.cloudflare.com/ajax/libs/pagedown/1.0/Markdown.Converter.js"></script>
    <script src="//cdnjs.cloudflare.com/ajax/libs/pagedown/1.0/Markdown.Editor.js"></script>
    <script src="//cdnjs.cloudflare.com/ajax/libs/pagedown/1.0/Markdown.Sanitizer.js"></script>
    <link rel="stylesheet" type="text/css" href="{{ url_for('static', filename='wmd.css') }}">
    <link rel="stylesheet" type="text/css" href="{{ url_for('static', filename='modal.css') }}">
{% endblock %}
{% block content %}
    <div class="container">
        <div class="jumbotron">
            <h1 class="text-center" style="padding-bottom:30px;">{{ experiment.name|e }}</h1>
        </div>
        {% if experiment.markdown %}
            <div class="row text-center" style="padding:10px 0 10px 0;margin: 0 50px 30px 50px;">
                <button id="mdBtn">Show Description</button>
            </div>
            <div id="mdModal" class="modal">
                <div class="modal-content">
                    <div class="row">
                        <div class="col-md-10"></div>
                        <div class="col-md-2"><span class="close" id="mdClose">&times;</span></div>
                    </div>
                    <div class="row">
                        <div class="col-md-12">
                            <div id="wmd-button-bar" hidden></div>
                            <textarea id="wmd-input" name="markdown" hidden>{{ experiment.markdown }}</textarea>
                            <div id="wmd-preview" style="margin-bottom: 20px;background-color: #efefef;"></div>
                        </div>
                    </div>
                    <script type="text/javascript">
                        var converter = Markdown.getSanitizingConverter();
                        var editor = new Markdown.Editor(converter);
                        editor.run();
                    </script>
                </div>
            </div>
            <script type="text/javascript">
                let mdModal = document.getElementById("mdModal");

                if (sessionStorage.getItem("modalOpen") === "true") {
                    mdModal.style.display = "block";
                }

                document.getElementById("mdBtn").onclick = function () {
                    mdModal.style.display = "block";
                    sessionStorage.setItem('modalOpen', "true");
                };

                document.getElementById("mdClose").onclick = function () {
                    mdModal.style.display = "none";
                    sessionStorage.setItem('modalOpen', "false");
                };

                window.onclick = function (event) {
                    if (event.target === mdModal) {
                        mdModal.style.display = "none";
                        sessionStorage.setItem('modalOpen', "false");
                    }
                }
            </script>
        {% endif %}
        {% if experiment.state == "configuration" %}
            <div class="row text-center"
                 style="border: 2px solid black;padding:10px 0 10px 0;margin: 0 50px 30px 50px;">
                <div class="col-md-6">
                    <a href="{{ request.url_root + 'experiment/' + hash + '/add_assembler_config' }}"
                    ><b>add feature assembling config</b></a>
                </div>
                <div class="col-md-6">
                    <a href="{{ request.url_root + 'experiment/' + hash + '/add_learning_config' }}"
                    ><b>add learning config</b></a>
                </div>
            </div>
        {% endif %}
        {{ initAjax() }}
        <script>
            ajaxRequest.onreadystatechange = function () {
                if (ajaxRequest.readyState === 4) {
                    if (ajaxRequest.responseText === "generate_tasks_success" ||
                        ajaxRequest.responseText === "stop_success" ||
                        ajaxRequest.responseText === "reorder_success" ||
                        ajaxRequest.responseText === "run_success") {
                        location.reload(true);
                    } else if (ajaxRequest.responseText === "run_failed") {
                        alert("Run failed!");
                    } else if (ajaxRequest.responseText === "stop_failed") {
                        alert("Stop failed!");
                    } else if (ajaxRequest.responseText === "reorder_failed") {
                        alert("Reorder failed!");
                    } else if (ajaxRequest.responseText === "generate_tasks_need_assembling") {
                        alert("At least one Feature Assembling method is required!");
                    } else if (ajaxRequest.responseText) {
                        console.log(ajaxRequest.responseText);
                        let row = document.getElementById(ajaxRequest.responseText + "_row");
                        if (row)
                            row.parentNode.removeChild(row);
                    }
                }
            };

            function generate_tasks() {
                sendPost("{{ request.url }}", {command: 'generate_tasks'});
            }

            function deleteConfig(id) {
                sendPost("{{ request.url_root + "delete_config" }}", {hash: "{{ hash }}", id});
            }

            function runAllTasks() {
                sendPost("{{ request.url }}", {command: 'run_all', hash: "{{ hash }}"});
            }

            function runTask(id) {
                sendPost("{{ request.url }}", {command: 'run_task', hash: "{{ hash }}", id});
            }

            function rerunAllTasks() {
                sendPost("{{ request.url }}", {command: 'rerun_all', hash: "{{ hash }}"});
            }

            function rerunTask(id) {
                sendPost("{{ request.url }}", {command: 'rerun_task', hash: "{{ hash }}", id});
            }

            function stopAllTasks() {
                sendPost("{{ request.url }}", {command: 'stop_all', hash: "{{ hash }}"});
            }

            function stopTask(id) {
                sendPost("{{ request.url }}", {command: 'stop_task', hash: "{{ hash }}", id});
            }

            function reorderTask(id, direction) {
                sendPost("{{ request.url }}", {command: 'reorder_task', hash: "{{ hash }}", id, direction});
            }
        </script>
        <table class="table" style="border: 1px solid black;">
            <caption style="border: 2px solid black;text-align: center"><h4><b>Configuration</b></h4></caption>
            {% if experiment.state == "configuration" %}
                <colgroup>
                    <col span="1" style="width: 26%;">
                    <col span="1" style="width: 5%;">
                    <col span="1" style="width: 45%;">
                    <col span="1" style="width: 3%;">
                    <col span="1" style="width: 3%;">
                    <col span="1" style="width: 3%;">
                </colgroup>
                <tr style="border: 2px solid black;">
                    <th>Name</th>
                    <th>Type</th>
                    <th>Info</th>
                    <th>Copy</th>
                    <th>Edit</th>
                    <th>Delete</th>
                </tr>
            {% else %}
                <colgroup>
                    <col span="1" style="width: 25%;">
                    <col span="1" style="width: 5%;">
                    <col span="1" style="width: 70%;">
                </colgroup>
                <tr style="border: 2px solid black;">
                    <th>Name</th>
                    <th>Type</th>
                    <th>Info</th>
                </tr>
            {% endif %}
            {% for a_id, assemble_config in experiment.assemble_configs %}
                {{ experiment_config_row(experiment.state, 'assembling', 'Feature', a_id, assemble_config) }}
            {% endfor %}
            {% for l_id, learn_config in experiment.learn_configs %}
                {{ experiment_config_row(experiment.state, 'learning', 'Learning', l_id, learn_config) }}
            {% endfor %}
        </table>

        {% if experiment.state == "configuration" %}
            <div class="text-center">
                <button type="button" onclick="generate_tasks()"><b>GENERATE TASKS</b></button>
            </div>
        {% elif experiment.state == "generating_tasks" %}
            <div class="text-center">
                <h3><b>Generating tasks...</b></h3>
            </div>
        {% else %}
            {% if experiment.show_summary %}
                <div class="text-center">
                    <a href="{{ request.url_root + 'experiment/' + hash + '/summary' }}"><h3><b>Summary</b></h3></a>
                </div>
            {% endif %}
            <input type="text" id="tasks_table_searchInput" onkeyup="searchTable([1, 2, 4])" placeholder="Search here.."
                   style="background-image: url('{{ url_for('static', filename='searchicon.png') }}');
                           background-position: 10px 12px;
                           background-repeat: no-repeat;
                           width: 100%;
                           font-size: 16px;
                           padding: 12px 20px 12px 40px;
                           border: 1px solid #ddd;
                           margin-bottom: 12px;">
            <table id="tasks_table" class="table" style="border: 1px solid black;">
                <caption style="border: 2px solid black;text-align: center"><h4><b>Tasks</b></h4></caption>
                <colgroup>
                    <col span="1" style="width: 6%;">
                    <col span="1" style="width: 24%;">
                    <col span="1" style="width: 40%;">
                    <col span="1" style="width: 5%;">
                    <col span="1" style="width: 20%;">
                    <col span="1" style="width: 5%;">
                </colgroup>
                <tr style="border: 2px solid black;">
                    <th>Order</th>
                    <th>Name</th>
                    <th>Info</th>
                    {% if experiment.has_runnable_tasks %}
                        <th>
                            <input type="image" onclick="runAllTasks()"
                                   src="{{ url_for('static', filename='play-multiple.png') }}" height="30" width="30"
                                   alt="run button"/>
                        </th>
                    {% elif experiment.all_tasks_completed %}
                        <th>{{ done(32) }}</th>
                    {% else %}
                        <th></th>
                    {% endif %}
                    <th>Status</th>
                    {% if experiment.all_tasks_completed %}
                        <th>
                            <input type="image" onclick="rerunAllTasks()"
                                   src="{{ url_for('static', filename='restart-multiple.png') }}" height="30" width="30"
                                   alt="rerun button"/>
                        </th>
                    {% elif experiment.has_stoppable_tasks %}
                        <th>
                            <input type="image" onclick="stopAllTasks()"
                                   src="{{ url_for('static', filename='stop-multiple.png') }}" height="30" width="30"
                                   alt="stop button"/>
                        </th>
                    {% else %}
                        <th></th>
                    {% endif %}
                </tr>
                {% for task in experiment.tasks %}
                    {{ experiment_task_row(task, experiment) }}
                {% endfor %}
            </table>
            {{ search_table("tasks_table", "tasks_table_searchInput") }}
            <script>
                let tasks_table_searchInput = document.getElementById("tasks_table_searchInput");
                tasks_table_searchInput.value = sessionStorage.getItem("tasks_table_searchInput");
                searchTable([1, 2, 4]);
            </script>
        {% endif %}
    </div>
{%- endblock %}
